<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BinaryTree</title>
    <link href="/2022/02/18/BinaryTree/"/>
    <url>/2022/02/18/BinaryTree/</url>
    
    <content type="html"><![CDATA[<h2 id="Get-all-nodes-in-binary-tree"><a href="#Get-all-nodes-in-binary-tree" class="headerlink" title="Get all nodes in binary tree"></a>Get all nodes in binary tree</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">getAllNodes</span><span class="hljs-params">(TreeNode root)</span> &#123;<br><span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">leftTotal</span> <span class="hljs-operator">=</span> getAllNodes(root.left);<br><span class="hljs-type">int</span> <span class="hljs-variable">rightTotal</span> <span class="hljs-operator">=</span> getAllNodes(root.right);<br><br><span class="hljs-keyword">return</span> leftTotal + rightTotal + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Get-height-of-binary-tree"><a href="#Get-height-of-binary-tree" class="headerlink" title="Get height of binary tree"></a>Get height of binary tree</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(Node root)</span> &#123;<br><span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> getHeight(root.left);<br><span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> getHeight(root.right);<br><br><span class="hljs-keyword">return</span> Math.max(left+right)+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithem</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BinaryTree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AsyncJs</title>
    <link href="/2022/02/11/AsyncJs/"/>
    <url>/2022/02/11/AsyncJs/</url>
    
    <content type="html"><![CDATA[<h1 id="Why-do-we-need-asynchronous-communication"><a href="#Why-do-we-need-asynchronous-communication" class="headerlink" title="Why do we need asynchronous communication?"></a><strong>Why do we need asynchronous communication?</strong></h1><p>when we doing the communication between client and server by sending HTTP request, we cannot rerender the whole page if we only want one small elements to be updated. Instead, we want things to be asynchronously communicated between client side and server side. </p><p>There are few methods to do asynchronous communication that I will introduce now.</p><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest</a> </p><p>XMLHttpRequest is a native Js class that allow us to send requests to the server. It is designed to handle async communication between client and server. XMLHttpRequest works with XML, JSON and many other types of data.</p><p>How to use it?</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// Firstly, we need create a instance from the class.</span><br><span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><span class="hljs-comment">// Once it is created, we need to know two things: HTTP method(PUT, POST, GET..) and URL we want to make the request.</span><br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">URL</span> = <span class="hljs-string">&#x27;...&#x27;</span>;<br>request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-variable constant_">URL</span>);<br><span class="hljs-comment">// now we get all data in request variable and we can transfer it into Json format by using</span><br><span class="hljs-keyword">var</span> body = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data)<br></code></pre></td></tr></table></figure><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p><a href="https://zhuanlan.zhihu.com/p/24684803">https://zhuanlan.zhihu.com/p/24684803</a></p><p>Promises is a encapsulation of async operation, that provide an API to user to have a method when the async returns success or fail.</p><pre><code class=" mermaid">graph LR;Promises--success--&gt;resolved--&gt;thenPromises--fail--&gt;rejected--&gt;catch</code></pre><p>We take one function as the parameter when initializing the object, in the function, we are passing two parameters which are resolve (return when success) and reject(return when fail).</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// suppose I have eat which is doing eat operation, and if we have money, we return true to fullfilled, otherwise, return money.</span><br><span class="hljs-keyword">const</span> money = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> full = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">var</span> eat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<br><span class="hljs-comment">// in Promise we have a function has two parameters</span><br><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br><span class="hljs-keyword">if</span>(money&gt;<span class="hljs-number">0</span>) &#123;<br> full = <span class="hljs-literal">true</span>;<br><span class="hljs-title function_">resolve</span>(full);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">reject</span>(money);<br>&#125;<br>&#125;);<br>---<br><span class="hljs-comment">// And then we can chain the eat operation with .then(function()&#123;...&#125;) in the function, and we can catch errors in catch().</span><br><span class="hljs-keyword">var</span> goEat = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//the function in .then() is a callback function which the parameter is the return value from previous .then(), in this case, it is fullfilled.</span><br>eat.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">isFull</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(isFull);<br><span class="hljs-comment">// output true</span><br><span class="hljs-comment">// the return value is passing to the next .then() if the next .then() exist</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Nice&quot;</span>;<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br><span class="hljs-comment">// finally() will always operate no matter what</span><br>&#125;).<span class="hljs-title function_">finally</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;sleep&quot;</span>);<br>&#125;)<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Chaining"><a href="#Chaining" class="headerlink" title="Chaining"></a>Chaining</h3><p>Just like I mentioned, Promises can be chained to each other.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> haveAMeal = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>eat<br>.<span class="hljs-title function_">then</span>(hasEnergy)<br>.<span class="hljs-title function_">then</span>(goToWork)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async Await"></a>Async Await</h2><p>Async Await is on the top of Promise. Which make us easier to write code.</p><p>Firstly, async has to declear a function. And it always return a Promise object.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>Secondly, await has to be directly inside an async function. </p><p>await means “wait me for a second”, the other code won’t be execute if await function is not finished.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">await</span> something;<br>&#125;<br></code></pre></td></tr></table></figure><p>Example:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">test</span>= <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-string">&quot;message&quot;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;I will wait for previous operation&#x27;</span>);<br><span class="hljs-comment">// return an value to the next .then(), similar to Promise.</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-comment">// only test is executed, the function in next .then() will be executed</span><br><span class="hljs-title function_">test</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span>=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;output&#x27;</span>,result); <br>&#125;)<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// message</span><br><span class="hljs-comment">// I will wait for previous operation</span><br><span class="hljs-comment">// output message</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Using docker and jenkins to deploy a website</title>
    <link href="/2021/06/04/My-New-Post/"/>
    <url>/2021/06/04/My-New-Post/</url>
    
    <content type="html"><![CDATA[<h1 id="Using-docker-and-jenkins-to-deploy-a-website"><a href="#Using-docker-and-jenkins-to-deploy-a-website" class="headerlink" title="Using docker and jenkins to deploy a website"></a>Using docker and jenkins to deploy a website</h1><h4 id="Why-choose-this-topic"><a href="#Why-choose-this-topic" class="headerlink" title="Why choose this topic?"></a>Why choose this topic?</h4><p>By using jenkins, we can deploy and update the website automatilcally. Also, we need to use ssh keys to proceed a series of operations. With jenkins, we can also package our proejct automatically.</p><blockquote><p>Tools we need:</p><p>Docker — To run the Jenkins</p><p>Jenkins — Auto deploy platform</p><p>Nginx — website server</p></blockquote><h3 id="Let’s-Start"><a href="#Let’s-Start" class="headerlink" title="Let’s Start!"></a><strong>Let’s Start!</strong></h3><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>You should install docker on your environment. If you did not install, please follow with the link <code>https://www.docker.com/get-started</code></p><p>I am using desktop version for mac, so I can make sure the docker is running by check the icon.</p><img src="/images/post1/1.png" alt="1" style="zoom:50%;" /><h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><p>Open your terminal, using docker command pull and run the jenkins.</p><p><code>docker run -p 8080:8080 -p 50000:50000 -d -v jenkins_home:/jenkins_home jenkins/jenkins:lts-jdk11</code></p><p><strong>Note: the version should be the latest, it is important because you will fail to install some plugins if the images is not the latest. To find the latest, follow the link <code>https://hub.docker.com/r/jenkins/jenkins</code>, the official jenkins stops update, so choose the /jenkins/jenkins</strong></p><ul><li>-p: map a local port 8080 to the docker port 8080</li><li>-d: run in the background</li><li>-v create a volume for jenkins, so we can store the configurations in the file.</li><li>Make sure we use jenkins/jenkins:lts, it is the latest version.</li></ul><p>When the jenkins is downloaded and running, we cannot see anything from the terminal.</p><p>But we can open our browser and enter <code>localhost:8080</code> to open the jenkins.</p><p><img src="/images/post1/3.png" alt="Screen Shot 2021-06-06 at 4.06.23 PM"></p><p>It says we need a password to unlock the jenkins. By looking at the password, we need to know which container it is by the command <code>docker ps</code></p><p><img src="/images/post1/4.png" alt="Screen Shot 2021-06-06 at 4.07.53 PM"></p><p>Copy the container id and use the command <code>docker logs + [container id]</code> to inspect the logs of the container when we run it. <em>If we delete -d mode when we run it, the log will be automatically displayed</em></p><p><img src="/images/post1/5.png" alt="Screen Shot 2021-06-06 at 4.10.11 PM"></p><p>We can find the password similar like this, then put it into the website. We can got this. Because we need to make sure we have basic plugins, just choose the first option.</p><p><img src="/images/post1/2.png"></p><p><img src="/images/post1/6.png" alt="Screen Shot 2021-06-06 at 4.11.01 PM"></p><p>After we finish installation, we need to create a admin user.</p><p><img src="/images/post1/7.png" alt="Screen Shot 2021-06-06 at 5.03.59 PM"></p><p>Click finish</p><p><img src="/images/post1/8.png" alt="Screen Shot 2021-06-06 at 5.04.57 PM"></p><p>This is our jenkins! But before we use it, we need to install some plugins. </p><h5 id="Publish-over-ssh"><a href="#Publish-over-ssh" class="headerlink" title="Publish over ssh"></a><strong>Publish over ssh</strong></h5><p>Click <code>Manage Jenkins</code> -&gt; <code>Manage Plugins</code> -&gt; search <code>publish over ssh</code></p><p><img src="/images/post1/9.png" alt="Screen Shot 2021-06-06 at 5.05.17 PM"></p><p>Choose install without restart because we do not need to restart to use this service.</p><p><img src="/images/post1/10.png" alt="Screen Shot 2021-06-06 at 5.15.31 PM"></p><p>Now we have to configure our ssh connection before we move on.</p><p>Click <code>Manage Jenkins</code>-&gt; <code>Configure system</code>-&gt; Scroll down to the bottom when you can see Publish over ssh</p><p>There are some steps you need to follow to get connecting.</p><p><img src="/images/post1/11.png" alt="Screen Shot 2021-06-06 at 6.54.05 PM"></p><ol><li><p>Open up your terminal, enter <code> ssh-keygen -t rsa -b 1024</code> to generate ssh key. Note that you may provide a passphrase.</p><img src="images/12.png" alt="Screen Shot 2021-06-06 at 7.00.49 PM" style="zoom:80%;" /></li><li><p>Use <code>Cat .ssh/id_rsa</code> and copy the keys.</p></li><li><p>Enter in you passphrase when you generate the keys and Paste the copied keys into the “Key” section in the form.</p></li><li><p>Click <code>Add Server</code> and input the server information, here, I take my localhost as the server. If you have any cloud server, you can put those information here. You should click “User password auth…” if you have a password in your server.</p><p><img src="/images/post1/13.png" alt="Screen Shot 2021-06-06 at 7.04.19 PM"></p></li><li><p>Click Test connection and you will see “success”. If you did not see it, you might start your remote ssh login service. Usually it is sshd, but I am using mac, so I just open “settings-&gt;share-&gt;remote login” to enable it.</p></li></ol><p><strong>Node</strong></p><p>Because we are planning to deploy a website, the node plugin will help us to run the website. Similar when we install publish over ssh.</p><p>After installed the NodeJs, we should configure it(make sure which version we will use)</p><p>Click <code>Manage Jenkins</code>-&gt;<code>Global Tool Configuration</code> and find the NodeJs, <code>add NodeJs</code></p><p>Specify the name and choose the node version, then click save to finish configuration.</p><p><img src="/images/post1/14.png" alt="Screen Shot 2021-06-06 at 7.15.53 PM"></p><p><strong>Prepare a website project</strong></p><p>Here, I am using VUE to create a project called cs312final by the command <code>vue create cs312final</code></p><p>Similar to the React, vue use components to build website.</p><p>By default, when I run <code>npm run serve</code> it will port a page like this.</p><p><img src="/images/post1/15.png" alt="Screen Shot 2021-06-06 at 10.17.08 PM"></p><p>There are two files that we are going to create. Because we are going to use nginx as a server to render our website in a docker. We need to create files of <code>Dockerfile</code> and <code>nginx.conf</code></p><p>For <code>Dockerfile</code> we only want to run a nginx, so we will have:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> nginx<br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> dist /usr/share/nginx/html</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> nginx.conf /etc/nginx/nginx.con</span><br></code></pre></td></tr></table></figure><p>Expose a port 80 from the container.</p><p>For nginx.conf, we just simply configure it. The detailes are in comment.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span>  nginx;<br><span class="hljs-comment"># working process number</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-attribute">error_log</span>  /var/log/nginx/<span class="hljs-literal">error</span>.log <span class="hljs-literal">warn</span>;<br><span class="hljs-attribute">pid</span>        /var/run/nginx.pid;<br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-comment"># number of connection</span><br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment"># time for timeout</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-attribute">gzip</span>  <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">gzip_types</span> text/plain application/javascript text/css;<br><br>    <span class="hljs-comment"># virtual machine</span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-comment"># port</span><br>        <span class="hljs-attribute">listen</span>   <span class="hljs-number">80</span>;<br>        <span class="hljs-comment"># hostname</span><br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <br>        <span class="hljs-comment"># listening path</span><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   /usr/share/nginx/html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   /usr/share/nginx/html;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Make sure to put two files on the same level of package.json</p><img src="images/18.png" alt="Screen Shot 2021-06-06 at 10.31.28 PM" style="zoom:50%;" /><p>However, before we really deploy our website, we need to push it into github. The purpose of the step is Jenkins can get the file from github, but not locally. Remember the link of our repo: <code>https://github.com/xuq2/cs312final/</code></p><p>Now we can start to create our project in Jenkins. Back to the jenkins page, Click <code>New item</code>-&gt; Enter a proper name-&gt;Choose Freestyle project</p><p><img src="/images/post1/16.png" alt="Screen Shot 2021-06-06 at 10.21.15 PM"></p><p>This is what it looks like:</p><p><img src="/images/post1/17.png" alt="Screen Shot 2021-06-06 at 10.21.39 PM"></p><p>For this project, we can use command <code>Build now</code> to deploy things, and we need to configure them first.</p><p>Click <code>Configure</code> icon.</p><p>Input the name and select the <code>GitHub project</code> button, then Enter the github url into it.</p><p><img src="/images/post1/27.png" alt="Screen Shot 2021-06-06 at 10.32.59 PM"></p><p>And in the source code management, select <code>Git</code> and input the url as well. The two steps are make sure our project is obtaining files from github.</p><p><img src="/images/post1/26.png" alt="Screen Shot 2021-06-06 at 10.34.32 PM"></p><p>Scroll down, select <code>Provide Node &amp; npm bin/ folder to PATH</code> to use nodejs for our project.</p><p><img src="/images/post1/25.png" alt="Screen Shot 2021-06-06 at 10.36.36 PM"></p><p>In Build section,  we are having some commands to build the project before we are running it into a docker container.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $PATH<br>node -v<br>npm -v<br>npm install #install all dependencies that mentioned in package.json<br>npm run build #build the project which will output a dist/ file contains relavent files<br></code></pre></td></tr></table></figure><p><img src="/images/post1/19.png" alt="Screen Shot 2021-06-06 at 10.40.39 PM"></p><p><img src="/images/post1/20.png" alt="Screen Shot 2021-06-06 at 10.37.47 PM"></p><p>Then, we need to using ssh to connect to our server to deploy the website through docker. Input name and execute command are the final steps.</p><p><img src="/images/post1/21.png" alt="Screen Shot 2021-06-06 at 10.43.00 PM"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">security unlock-keychain -p [password] \<br> &amp;&amp; cd  /Users/xuqi/Desktop/CS_312/final_project/cs312final  \<br> &amp;&amp; /usr/local/bin/docker build -f Dockerfile  -t cs312final . \<br> &amp;&amp; /usr/local/bin/docker run -d -p 8085:80 --name cs312final -v  /Users/xuqi/Desktop/CS_312/final_project/workspace/cs312final/dist:/usr/share/nginx/html -v  /Users/xuqi/Desktop/CS_312/final_project/workspace/cs312final/nginx.conf:/etc/nginx/nginx.conf cs312final<br></code></pre></td></tr></table></figure><p>There are four commands in the box.</p><ol><li><p><code>security unlock-keychain -p [password]</code> Because I am using mac, I have to unlock the keychain before I make some operations. The output will show  us  “User interaction is not allowed” if we ignore this step.</p></li><li><p><code>cd  /Users/xuqi/Desktop/CS_312/final_project/cs312final</code> is to open the directory of the project, because we are going to access our docker file to build and run.</p></li><li><p><code>/usr/local/bin/docker build -f Dockerfile  -t cs312final . </code> Build the image, name it to cs312final.</p></li><li><p><code>/usr/local/bin/docker run -d -p 8085:80 --name cs312final cs312final</code> </p><p>This command will run the container in background and the port is mapped to 8050 to the local machine. </p></li></ol><p>Back to the project page and click <code>Build now</code>, you will see all the operations will be completed automatically.</p><p><img src="/images/post1/22.png" alt="Screen Shot 2021-06-06 at 9.39.47 PM"></p><p><img src="/images/post1/23.png" alt="Screen Shot 2021-06-06 at 9.40.03 PM"></p><p><strong>Success!</strong></p><p>Then open your browser and input <code>localhost:8050</code>, you will see:</p><p><img src="/images/post1/24.png" alt="Screen Shot 2021-06-06 at 10.11.38 PM"></p><p><strong>Done</strong></p><p>Jenkins can do more than this, there is pipeline project, there is trigger that you can set a condition to make it deploy automatically, for example, when we push our project to github, it will build and deploy…</p><p>Thank you for reading. ☕️</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
